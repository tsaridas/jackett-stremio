name: release-dockerhub

on:
  push:
    branches:
      - main
    paths:
      - '*.js'
      - 'Dockerfile'
      - 'package.json'

env:
  TMP_LOCAL_IMAGE: localhost:5000/${{ github.repository }}
  REGISTRY_IMAGE: ${{ github.repository }}
  TAG_NAME: ${{ github.event.inputs.TAG_NAME || github.event.release.tag_name }}
  REGISTRY_TAG: latest
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check_release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.check.outputs.version }}
    steps:
      - name: CheckRelease
        id: check
        run: |
          VERSION=$(curl -s https://api.github.com/repos/tsaridas/jackett-stremio/releases/latest | grep \"name | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
          NEWVERSION=${VERSION:0:-1}$((${VERSION: -1}+1))
          echo "We will release $NEWVERSION"
          echo "version=$NEWVERSION" >> $GITHUB_OUTPUT
          jq ".version = \"$$NEWVERSION\"" < package.json > package.json.tmp && mv package.json.tmp package.json
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add package.json
          git commit -m "Update version to $new_version"
          git push
  build:
    runs-on: ubuntu-latest
    needs:
      - check_release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare
        run: |
          mkdir -p /tmp/images
          platform=${{ matrix.platform }}
          echo "TARFILE=${platform//\//-}.tar" >> $GITHUB_ENV
          echo "TAG=${{ env.TMP_LOCAL_IMAGE }}:${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          tags: ${{ env.TAG }}
          outputs: type=docker,dest=/tmp/images/${{ env.TARFILE }}

      - name: Load images
        run: |
          for image in /tmp/images/*.tar; do
            docker load -i $image
          done

      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: images
          path: /tmp/images/${{ env.TARFILE }}
          if-no-files-found: error
          retention-days: 1
  
  push:
    runs-on: ubuntu-latest
    needs:
      - build
      - check_release
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Download images
        uses: actions/download-artifact@v3
        with:
          name: images
          path: /tmp/images

      - name: Load images
        run: |
          for image in /tmp/images/*.tar; do
            docker load -i $image
          done

      - name: Push images to local registry
        run: |
          docker push -a ${{ env.TMP_LOCAL_IMAGE }}

      - name: Login to DockerHUB
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASS }}

      - name: Create manifest list and push
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ env.REGISTRY_TAG }} -t ${{ env.REGISTRY_IMAGE }}:${{ needs.check_release.outputs.version }} \
            $(docker image ls --format '{{.Repository}}:{{.Tag}}' '${{ env.TMP_LOCAL_IMAGE }}' | tr '\n' ' ')

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ env.REGISTRY_TAG }}
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ needs.check_release.outputs.version }}
  
  release:
    runs-on: ubuntu-latest
    needs:
      - build
      - check_release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Release
        run: |
          gh release create ${{ needs.check_release.outputs.version }} --title "Release ${{ needs.check_release.outputs.version }}" --notes "New Release" 
